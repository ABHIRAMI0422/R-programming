## x is a 2*2 matrix
## m is a null metrix
##makeCacheMatrix function creates a special "matrix" object that can cache its inverse
makeCacheMatrix<-function(x=matrix()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setInverse<-function(inverse)m<<-inverse
getInverse<-function()m
list(set=set,get=get,setInverse=setInverse,getInverse)
}
## cacheSolve function computes the inverse of the special "matrix" returned by makeCacheMatrix
cacheSolve<-function(x, ...){
m<-x$getInverse()
if(!is.null(m)){
message("getting cached data")
return(m)
}
mat<-x$get()
m<-solve(mat,...)
x$setInverse(m)
m
}
